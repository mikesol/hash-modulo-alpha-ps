module Exprs.GMM where
import Prelude
import Expr(Expr(..))

expr :: Expr Unit String
expr =App unit  (Lam unit  "gmm_knossos_tri" (App unit  (Lam unit  "exp$VecR" (App unit  (Lam unit  "mul$R$VecR" (App unit  (Lam unit  "mul$R$VecVecR" (App unit  (Lam unit  "mul$VecR$VecR" (App unit  (Lam unit  "sub$VecR$VecR" (App unit  (Lam unit  "fwd$dot" (App unit  (Lam unit  "rev$dot" (App unit  (Lam unit  "dot" (App unit  (Lam unit  "sqnorm" (App unit  (Lam unit  "shape$mul$Mat$Vec" (App unit  (Lam unit  "fwd$mul$Mat$Vec" (App unit  (Lam unit  "gmm_knossos_makeQ" (App unit  (Lam unit  "logsumexp" (App unit  (Lam unit  "log_gamma_distrib" (App unit  (Lam unit  "log_wishart_prior" (App unit  (Lam unit  "gmm_knossos_gmm_objective" (App unit  (Lam unit  "mkfloat" (App unit  (Lam unit  "mkvec" (App unit  (Lam unit  "mkvecvec" (App unit  (Lam unit  "not_" (App unit  (Lam unit  "var[D]" (App unit  (Lam unit  "var[N]" (App unit  (Lam unit  "var[K]" (App unit  (Lam unit  "var[seed]" (App unit  (Lam unit  "var[scale_unity]" (App unit  (Lam unit  "var[scale_small]" (App unit  (Lam unit  "var[x]" (App unit  (Lam unit  "var[alphas]" (App unit  (Lam unit  "var[mus]" (App unit  (Lam unit  "var[qs]" (App unit  (Lam unit  "var[ls]" (App unit  (Lam unit  "var[wishart]" (App unit  (Lam unit  "var[delta]" (App unit  (Lam unit  "var[dx]" (App unit  (Lam unit  "var[dalphas]" (App unit  (Lam unit  "var[dmus]" (App unit  (Lam unit  "var[dqs]" (App unit  (Lam unit  "var[dls]" (App unit  (Lam unit  "var[dwishart]" (App unit  (Lam unit  "var[dtheta]" (App unit  (Lam unit  "var[gmm_at_theta]" (App unit  (Lam unit  "var[gmm_at_theta_plus_dtheta]" (App unit  (Lam unit  "var[gmm_fd]" (App unit  (Lam unit  "var[gmm_fwd]" (App unit  (Lam unit  "var[golden_test_gmm_objective]" (App unit  (Lam unit  "var[everything_works_as_expected]" (App unit  (Lam unit  "var[impossibly_good]" (App unit  (Lam unit  "var[grad_gmm]" (App unit  (Lam unit  "var[grad_gmm_x]" (App unit  (Lam unit  "var[grad_gmm_alphas]" (App unit  (Lam unit  "var[grad_gmm_mus]" (App unit  (Lam unit  "var[grad_gmm_qs]" (App unit  (Lam unit  "var[grad_gmm_ls]" (App unit  (Lam unit  "var[grad_gmm_wishart]" (App unit  (Lam unit  "var[dot_at_x]" (App unit  (Lam unit  "var[dot_at_alphas]" (App unit  (Lam unit  "var[dot_at_mus]" (App unit  (Lam unit  "var[dot_at_qs]" (App unit  (Lam unit  "var[dot_at_ls]" (App unit  (Lam unit  "var[dot_at_wishart]" (App unit  (Lam unit  "var[grad_gmm_dot_dtheta]" (App unit  (Lam unit  "var[df]" (App unit  (Lam unit  "var[rev_ok]" (App unit  (Lam unit  "var[checked]" (App unit  (Lam unit  "var[tolerance]" (App unit  (Lam unit  "var[everything_works_as_expected_reverse]" (App unit  (Var unit  "func[print]") (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[x]")) (App unit  (Var unit  "func[gmm_knossos_makeQ]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "const[0]")) (Var unit  "var[qs]")))) (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "const[0]")) (Var unit  "var[ls]")))))) (Var unit  "const[----]")) (App unit  (Var unit  "func[mul$Mat$Vec]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[gmm_knossos_makeQ]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "const[0]")) (Var unit  "var[qs]")))) (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "const[0]")) (Var unit  "var[ls]")))))) (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "const[0]")) (Var unit  "var[x]")))))) (Var unit  "const[gmm_at_theta = ]")) (Var unit  "var[gmm_at_theta]")) (Var unit  "const[ ---- ]")) (Var unit  "const[gmm_at_theta_plus_dtheta = ]")) (Var unit  "var[gmm_at_theta_plus_dtheta]")) (Var unit  "const[ ---- ]")) (Var unit  "const[gmm_fwd = ]")) (Var unit  "var[gmm_fwd]")) (Var unit  "const[ ---- ]")) (Var unit  "const[gmm_fd = ]")) (Var unit  "var[gmm_fd]")) (Var unit  "const[ ---- ]")) (Var unit  "const[grad_gmm = ]")) (Var unit  "var[grad_gmm]")) (Var unit  "const[ ---- ]")) (Var unit  "const[dtheta = ]")) (Var unit  "var[dtheta]")) (Var unit  "const[ ---- ]")) (Var unit  "const[rev_ok = ]")) (Var unit  "var[rev_ok]")) (Var unit  "const[ ---- ]")) (Var unit  "const[Checked, should be small: ]")) (Var unit  "var[checked]")) (Var unit  "const[ ---- ]")) (Var unit  "const[TESTS FOLLOW]")) (Var unit  "const[ ---- ]")) (Var unit  "const[Golden test GMM objective ]")) (Var unit  "var[golden_test_gmm_objective]")) (Var unit  "const[ ---- ]")) (Var unit  "const[Reverse mode as expected ]")) (Var unit  "var[everything_works_as_expected_reverse]")) (Var unit  "const[ ---- ]")) (Var unit  "const[Forward mode as expected ]")) (Var unit  "var[everything_works_as_expected]")) (Var unit  "const[ ---- ]")) (Var unit  "const[Not impossibly good ]")) (App unit  (Var unit  "func[not_]") (Var unit  "var[impossibly_good]"))))) (App unit  (Var unit  "func[lt]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[checked]")) (Var unit  "var[tolerance]"))))) (Var unit  "const[0.0001]"))) (App unit  (Var unit  "func[$check]") (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (Var unit  "makeTuple") (Lam unit  "Var(name='var[t]')" (App unit  (Var unit  "func[gmm_knossos_gmm_objective]") (Var unit  "var[t]")))) (Lam unit  "Var(name='var[t]')" (App unit  (Var unit  "func[rev$gmm_knossos_gmm_objective]") (Var unit  "var[t]")))) (App unit  (Var unit  "func[tuple]") (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[x]")) (Var unit  "var[alphas]")) (Var unit  "var[mus]")) (Var unit  "var[qs]")) (Var unit  "var[ls]")) (Var unit  "var[wishart]")))) (App unit  (Var unit  "func[tuple]") (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[x]")) (Var unit  "var[alphas]")) (Var unit  "var[mus]")) (Var unit  "var[qs]")) (Var unit  "var[ls]")) (Var unit  "var[wishart]")))) (App unit  (Var unit  "func[tuple]") (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[dx]")) (Var unit  "var[dalphas]")) (Var unit  "var[dmus]")) (Var unit  "var[dqs]")) (Var unit  "var[dls]")) (Var unit  "var[dwishart]")))) (Var unit  "const[1.0]"))))) (App unit  (Var unit  "func[tuple]") (App unit  (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[grad_gmm_dot_dtheta]")) (Var unit  "const[ ==?== ]")) (Var unit  "var[df]"))))) (App unit  (Var unit  "func[sub]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[gmm_at_theta_plus_dtheta]")) (Var unit  "var[gmm_at_theta]"))))) (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[dot_at_x]")) (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[dot_at_alphas]")) (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[dot_at_mus]")) (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[dot_at_qs]")) (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[dot_at_ls]")) (Var unit  "var[dot_at_wishart]"))))))))))))) (App unit  (Var unit  "func[mul]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[get$1$2]") (Var unit  "var[grad_gmm_wishart]"))) (App unit  (Var unit  "func[get$1$2]") (Var unit  "var[dwishart]")))))) (App unit  (Var unit  "func[dot]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[grad_gmm_ls]")) (Var unit  "var[dls]"))))) (App unit  (Var unit  "func[dot]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[grad_gmm_qs]")) (Var unit  "var[dqs]"))))) (App unit  (Var unit  "func[dot]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[grad_gmm_mus]")) (Var unit  "var[dmus]"))))) (App unit  (Var unit  "func[dot]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[grad_gmm_alphas]")) (Var unit  "var[dalphas]"))))) (App unit  (Var unit  "func[dot]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[grad_gmm_x]")) (Var unit  "var[dx]"))))) (App unit  (Var unit  "func[get$6$6]") (Var unit  "var[grad_gmm]")))) (App unit  (Var unit  "func[get$5$6]") (Var unit  "var[grad_gmm]")))) (App unit  (Var unit  "func[get$4$6]") (Var unit  "var[grad_gmm]")))) (App unit  (Var unit  "func[get$3$6]") (Var unit  "var[grad_gmm]")))) (App unit  (Var unit  "func[get$2$6]") (Var unit  "var[grad_gmm]")))) (App unit  (Var unit  "func[get$1$6]") (Var unit  "var[grad_gmm]")))) (App unit  (Var unit  "func[rev$gmm_knossos_gmm_objective]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[tuple]") (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[x]")) (Var unit  "var[alphas]")) (Var unit  "var[mus]")) (Var unit  "var[qs]")) (Var unit  "var[ls]")) (Var unit  "var[wishart]")))) (Var unit  "const[1.0]"))))) (App unit  (Var unit  "func[eq]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[gmm_fd]")) (Var unit  "var[gmm_fwd]"))))) (App unit  (Lam unit  "var[tolerance]" (App unit  (Lam unit  "var[actual]" (App unit  (Lam unit  "var[expected]" (App unit  (Var unit  "func[lt]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[abs]") (App unit  (Var unit  "func[sub]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[actual]")) (Var unit  "var[expected]"))))) (App unit  (Var unit  "func[max]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[mul]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[abs]") (Var unit  "var[expected]"))) (Var unit  "var[tolerance]")))) (Var unit  "var[tolerance]")))))) (Var unit  "var[gmm_fwd]"))) (Var unit  "var[gmm_fd]"))) (Var unit  "const[0.001]")))) (App unit  (Lam unit  "var[tolerance]" (App unit  (Lam unit  "var[actual]" (App unit  (Lam unit  "var[expected]" (App unit  (Var unit  "func[lt]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[abs]") (App unit  (Var unit  "func[sub]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[actual]")) (Var unit  "var[expected]"))))) (App unit  (Var unit  "func[max]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[mul]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[abs]") (Var unit  "var[expected]"))) (Var unit  "var[tolerance]")))) (Var unit  "var[tolerance]")))))) (Var unit  "const[76.0882]"))) (Var unit  "var[gmm_at_theta]"))) (Var unit  "const[1e-06]")))) (App unit  (Var unit  "func[fwd$gmm_knossos_gmm_objective]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[tuple]") (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[x]")) (Var unit  "var[alphas]")) (Var unit  "var[mus]")) (Var unit  "var[qs]")) (Var unit  "var[ls]")) (Var unit  "var[wishart]")))) (App unit  (Var unit  "func[tuple]") (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[dx]")) (Var unit  "var[dalphas]")) (Var unit  "var[dmus]")) (Var unit  "var[dqs]")) (Var unit  "var[dls]")) (Var unit  "var[dwishart]"))))))) (App unit  (Var unit  "func[sub]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[gmm_at_theta_plus_dtheta]")) (Var unit  "var[gmm_at_theta]"))))) (App unit  (Var unit  "func[gmm_knossos_gmm_objective]") (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[ts_add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[x]")) (Var unit  "var[dx]")))) (App unit  (Var unit  "func[ts_add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[alphas]")) (Var unit  "var[dalphas]")))) (App unit  (Var unit  "func[ts_add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[mus]")) (Var unit  "var[dmus]")))) (App unit  (Var unit  "func[ts_add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[qs]")) (Var unit  "var[dqs]")))) (App unit  (Var unit  "func[ts_add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[ls]")) (Var unit  "var[dls]")))) (App unit  (Var unit  "func[ts_add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[wishart]")) (Var unit  "var[dwishart]"))))))) (App unit  (Var unit  "func[gmm_knossos_gmm_objective]") (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[x]")) (Var unit  "var[alphas]")) (Var unit  "var[mus]")) (Var unit  "var[qs]")) (Var unit  "var[ls]")) (Var unit  "var[wishart]"))))) (App unit  (Var unit  "func[tuple]") (App unit  (App unit  (App unit  (App unit  (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[dx]")) (Var unit  "var[dalphas]")) (Var unit  "var[dmus]")) (Var unit  "var[dqs]")) (Var unit  "var[dls]")) (Var unit  "var[dwishart]"))))) (App unit  (Var unit  "func[tuple]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[mkfloat]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[seed]")) (Var unit  "const[10000]")))) (Var unit  "var[delta]")))) (App unit  (Var unit  "func[tuple]") (Var unit  "emptyArgsList")))))) (App unit  (Var unit  "func[mkvecvec]") (App unit  (App unit  (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[seed]")) (Var unit  "const[9000]")))) (Var unit  "var[K]")) (App unit  (Var unit  "func[gmm_knossos_tri]") (Var unit  "var[D]"))) (Var unit  "var[delta]"))))) (App unit  (Var unit  "func[mkvecvec]") (App unit  (App unit  (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[seed]")) (Var unit  "const[8000]")))) (Var unit  "var[K]")) (Var unit  "var[D]")) (Var unit  "var[delta]"))))) (App unit  (Var unit  "func[mkvecvec]") (App unit  (App unit  (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[seed]")) (Var unit  "const[7000]")))) (Var unit  "var[K]")) (Var unit  "var[D]")) (Var unit  "var[delta]"))))) (App unit  (Var unit  "func[mkvec]") (App unit  (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[seed]")) (Var unit  "const[6000]")))) (Var unit  "var[K]")) (Var unit  "var[delta]"))))) (App unit  (Var unit  "func[mkvecvec]") (App unit  (App unit  (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[seed]")) (Var unit  "const[5000]")))) (Var unit  "var[N]")) (Var unit  "var[D]")) (Var unit  "var[delta]"))))) (Var unit  "const[0.0001]"))) (App unit  (Var unit  "func[tuple]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "const[3.1]")) (Var unit  "const[7]"))))) (App unit  (Var unit  "func[mkvecvec]") (App unit  (App unit  (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[seed]")) (Var unit  "const[4000]")))) (Var unit  "var[K]")) (App unit  (Var unit  "func[gmm_knossos_tri]") (Var unit  "var[D]"))) (Var unit  "var[scale_unity]"))))) (App unit  (Var unit  "func[mkvecvec]") (App unit  (App unit  (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[seed]")) (Var unit  "const[3000]")))) (Var unit  "var[K]")) (Var unit  "var[D]")) (Var unit  "var[scale_small]"))))) (App unit  (Var unit  "func[mkvecvec]") (App unit  (App unit  (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[seed]")) (Var unit  "const[2000]")))) (Var unit  "var[K]")) (Var unit  "var[D]")) (Var unit  "var[scale_unity]"))))) (App unit  (Var unit  "func[mkvec]") (App unit  (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[seed]")) (Var unit  "const[1000]")))) (Var unit  "var[K]")) (Var unit  "var[scale_unity]"))))) (App unit  (Var unit  "func[mkvecvec]") (App unit  (App unit  (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[seed]")) (Var unit  "const[0]")))) (Var unit  "var[N]")) (Var unit  "var[D]")) (Var unit  "var[scale_unity]"))))) (Var unit  "const[0.1]"))) (Var unit  "const[1.0]"))) (Var unit  "const[0]"))) (Var unit  "const[10]"))) (Var unit  "const[5]"))) (Var unit  "const[4]"))) (App unit  (Var unit  "if") (App unit  (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[p]")) (Var unit  "const[False]")) (Var unit  "const[True]"))))) (App unit  (Var unit  "func[build]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[n]")) (Lam unit  "Var(name='var[j]')" (App unit  (Var unit  "func[mkvec]") (App unit  (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[mul]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[j]")) (Var unit  "var[m]")))) (Var unit  "var[seed]")))) (Var unit  "var[m]")) (Var unit  "var[scale]")))))))) (App unit  (Var unit  "func[build]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[n]")) (Lam unit  "Var(name='var[j]')" (App unit  (Var unit  "func[mkfloat]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[j]")) (Var unit  "var[seed]")))) (Var unit  "var[scale]")))))))) (App unit  (Var unit  "func[mul]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[$ranhashdoub]") (Var unit  "var[seed]"))) (Var unit  "var[scale]"))))) (App unit  (Lam unit  "var[N]" (App unit  (Lam unit  "var[K]" (App unit  (Lam unit  "var[D]" (App unit  (Lam unit  "var[triD]" (App unit  (Var unit  "assert") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[eq]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[triD]")) (App unit  (Var unit  "func[gmm_knossos_tri]") (Var unit  "var[D]"))))) (App unit  (Lam unit  "var[CONSTANT]" (App unit  (Lam unit  "var[sum_qs]" (App unit  (Lam unit  "var[slse]" (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[CONSTANT]")) (App unit  (Var unit  "func[sub]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[slse]")) (App unit  (Var unit  "func[mul]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[to_float]") (Var unit  "var[N]"))) (App unit  (Var unit  "func[logsumexp]") (Var unit  "var[alphas]"))))))))) (App unit  (Var unit  "func[sum]") (App unit  (Var unit  "func[build]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[K]")) (Lam unit  "Var(name='var[k]')" (App unit  (Var unit  "func[log_wishart_prior]") (App unit  (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[wishart]")) (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[k]")) (Var unit  "var[qs]")))) (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[k]")) (Var unit  "var[ls]")))))))))))) (App unit  (Var unit  "func[sum]") (App unit  (Var unit  "func[build]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[N]")) (Lam unit  "Var(name='var[i]')" (App unit  (Var unit  "func[logsumexp]") (App unit  (Var unit  "func[build]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[K]")) (Lam unit  "Var(name='var[k]')" (App unit  (Lam unit  "var[Q]" (App unit  (Lam unit  "var[mahal_vec]" (App unit  (Var unit  "func[sub]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[k]")) (Var unit  "var[alphas]")))) (App unit  (Var unit  "func[sum]") (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[k]")) (Var unit  "var[qs]"))))))) (App unit  (Var unit  "func[mul]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "const[0.5]")) (App unit  (Var unit  "func[sqnorm]") (Var unit  "var[mahal_vec]"))))))) (App unit  (Var unit  "func[mul$Mat$Vec]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[Q]")) (App unit  (Var unit  "func[sub$VecR$VecR]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[i]")) (Var unit  "var[x]")))) (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[k]")) (Var unit  "var[means]"))))))))) (App unit  (Var unit  "func[gmm_knossos_makeQ]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[k]")) (Var unit  "var[qs]")))) (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[k]")) (Var unit  "var[ls]")))))))))))))))) (App unit  (Var unit  "func[build]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[K]")) (Lam unit  "Var(name='var[k12]')" (App unit  (Var unit  "func[sum]") (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[k12]")) (Var unit  "var[qs]"))))))))) (App unit  (Var unit  "func[mul]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[to_float]") (App unit  (Var unit  "func[mul]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[N]")) (Var unit  "var[D]"))))) (App unit  (Var unit  "func[neg]") (Var unit  "const[0.9189385332046727]")))))))) (App unit  (Var unit  "func[size]") (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "const[0]")) (Var unit  "var[ls]")))))) (App unit  (Var unit  "func[size]") (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "const[0]")) (Var unit  "var[x]")))))) (App unit  (Var unit  "func[size]") (Var unit  "var[alphas]")))) (App unit  (Var unit  "func[size]") (Var unit  "var[x]"))))) (App unit  (Lam unit  "var[p]" (App unit  (Lam unit  "var[wishart_gamma]" (App unit  (Lam unit  "var[wishart_m]" (App unit  (Lam unit  "var[sum_qs]" (App unit  (Lam unit  "var[Qdiag]" (App unit  (Lam unit  "var[n]" (App unit  (Lam unit  "var[C]" (App unit  (Lam unit  "var[frobenius]" (App unit  (Lam unit  "var[w2f]" (App unit  (Var unit  "func[sub]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[sub]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[w2f]")) (App unit  (Var unit  "func[mul]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[to_float]") (Var unit  "var[wishart_m]"))) (Var unit  "var[sum_qs]")))))) (Var unit  "var[C]")))) (App unit  (Var unit  "func[mul]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "const[0.5]")) (App unit  (Var unit  "func[mul]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[mul]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[wishart_gamma]")) (Var unit  "var[wishart_gamma]")))) (Var unit  "var[frobenius]"))))))) (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[sqnorm]") (Var unit  "var[Qdiag]"))) (App unit  (Var unit  "func[sqnorm]") (Var unit  "var[ltri_Q]")))))) (App unit  (Var unit  "func[sub]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[mul]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[to_float]") (App unit  (Var unit  "func[mul]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[n]")) (Var unit  "var[p]"))))) (App unit  (Var unit  "func[sub]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[log]") (Var unit  "var[wishart_gamma]"))) (App unit  (Var unit  "func[mul]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "const[0.5]")) (App unit  (Var unit  "func[log]") (Var unit  "const[2.0]"))))))))) (App unit  (Var unit  "func[log_gamma_distrib]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[mul]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "const[0.5]")) (App unit  (Var unit  "func[to_float]") (Var unit  "var[n]"))))) (Var unit  "var[p]"))))))) (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[p]")) (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[wishart_m]")) (Var unit  "const[1]"))))))) (App unit  (Var unit  "func[exp$VecR]") (Var unit  "var[log_Qdiag]")))) (App unit  (Var unit  "func[sum]") (Var unit  "var[log_Qdiag]")))) (App unit  (Var unit  "func[get$2$2]") (Var unit  "var[wishart]")))) (App unit  (Var unit  "func[get$1$2]") (Var unit  "var[wishart]")))) (App unit  (Var unit  "func[size]") (Var unit  "var[log_Qdiag]"))))) (App unit  (Lam unit  "var[out]" (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[out]")) (App unit  (Var unit  "func[sum]") (App unit  (Var unit  "func[build]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[p]")) (Lam unit  "Var(name='var[j]')" (App unit  (Var unit  "func[lgamma]") (App unit  (Var unit  "func[sub]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[a]")) (App unit  (Var unit  "func[mul]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "const[0.5]")) (App unit  (Var unit  "func[to_float]") (Var unit  "var[j]")))))))))))))) (App unit  (Var unit  "func[mul]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "const[0.28618247146235004]")) (App unit  (Var unit  "func[to_float]") (App unit  (Var unit  "func[mul]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[p]")) (App unit  (Var unit  "func[sub]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[p]")) (Var unit  "const[1]"))))))))))) (App unit  (Var unit  "func[log]") (App unit  (Var unit  "func[sum]") (App unit  (Var unit  "func[exp$VecR]") (Var unit  "var[v]")))))) (App unit  (Lam unit  "var[D]" (App unit  (Lam unit  "var[triD]" (App unit  (Var unit  "assert") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[eq]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[triD]")) (App unit  (Var unit  "func[gmm_knossos_tri]") (Var unit  "var[D]"))))) (App unit  (Var unit  "func[build]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[D]")) (Lam unit  "Var(name='var[i]')" (App unit  (Var unit  "func[build]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[D]")) (Lam unit  "Var(name='var[j]')" (App unit  (Var unit  "if") (App unit  (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[lt]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[i]")) (Var unit  "var[j]")))) (Var unit  "const[0.0]")) (App unit  (Var unit  "if") (App unit  (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[eq]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[i]")) (Var unit  "var[j]")))) (App unit  (Var unit  "func[exp]") (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[i]")) (Var unit  "var[q]"))))) (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[sub]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[gmm_knossos_tri]") (Var unit  "var[D]"))) (App unit  (Var unit  "func[gmm_knossos_tri]") (App unit  (Var unit  "func[sub]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[D]")) (Var unit  "var[j]"))))))) (App unit  (Var unit  "func[sub]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[sub]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[i]")) (Var unit  "var[j]")))) (Var unit  "const[1]")))))) (Var unit  "var[l]")))))))))))))))) (App unit  (Var unit  "func[size]") (Var unit  "var[l]")))) (App unit  (Var unit  "func[size]") (Var unit  "var[q]"))))) (App unit  (Lam unit  "var[M]" (App unit  (Lam unit  "var[v]" (App unit  (Lam unit  "var[dM]" (App unit  (Lam unit  "var[dv]" (App unit  (Var unit  "func[ts_add]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[mul$Mat$Vec]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[dM]")) (Var unit  "var[v]")))) (App unit  (Var unit  "func[mul$Mat$Vec]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[M]")) (Var unit  "var[dv]")))))) (App unit  (Var unit  "func[get$2$2]") (Var unit  "var[dM_dv]")))) (App unit  (Var unit  "func[get$1$2]") (Var unit  "var[dM_dv]")))) (App unit  (Var unit  "func[get$2$2]") (Var unit  "var[M_v]")))) (App unit  (Var unit  "func[get$1$2]") (Var unit  "var[M_v]"))))) (App unit  (Var unit  "func[constVec]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[size]") (Var unit  "var[m]"))) (App unit  (Var unit  "func[tuple]") (Var unit  "emptyArgsList")))))) (App unit  (Var unit  "func[dot]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[v]")) (Var unit  "var[v]"))))) (App unit  (Var unit  "func[sum]") (App unit  (Var unit  "func[build]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[size]") (Var unit  "var[a]"))) (Lam unit  "Var(name='var[i]')" (App unit  (Var unit  "func[dot]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[i]")) (Var unit  "var[a]")))) (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[i]")) (Var unit  "var[b]"))))))))))) (App unit  (Lam unit  "var[a]" (App unit  (Lam unit  "var[b]" (App unit  (Var unit  "func[tuple]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[mul$R$VecR]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[dr]")) (Var unit  "var[b]")))) (App unit  (Var unit  "func[mul$R$VecR]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[dr]")) (Var unit  "var[a]")))))) (App unit  (Var unit  "func[get$2$2]") (Var unit  "var[a_b]")))) (App unit  (Var unit  "func[get$1$2]") (Var unit  "var[a_b]"))))) (App unit  (Lam unit  "var[a]" (App unit  (Lam unit  "var[b]" (App unit  (Lam unit  "var[da]" (App unit  (Lam unit  "var[db]" (App unit  (Var unit  "func[add]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[dot]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[a]")) (Var unit  "var[db]")))) (App unit  (Var unit  "func[dot]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[da]")) (Var unit  "var[b]")))))) (App unit  (Var unit  "func[get$2$2]") (Var unit  "var[da_db]")))) (App unit  (Var unit  "func[get$1$2]") (Var unit  "var[da_db]")))) (App unit  (Var unit  "func[get$2$2]") (Var unit  "var[a_b]")))) (App unit  (Var unit  "func[get$1$2]") (Var unit  "var[a_b]"))))) (App unit  (Var unit  "func[build]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[size]") (Var unit  "var[a]"))) (Lam unit  "Var(name='var[i]')" (App unit  (Var unit  "func[sub]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[i]")) (Var unit  "var[a]")))) (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[i]")) (Var unit  "var[b]")))))))))) (App unit  (Var unit  "func[build]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[size]") (Var unit  "var[a]"))) (Lam unit  "Var(name='var[i]')" (App unit  (Var unit  "func[mul]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[i]")) (Var unit  "var[a]")))) (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[i]")) (Var unit  "var[b]")))))))))) (App unit  (Var unit  "func[build]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[size]") (Var unit  "var[a]"))) (Lam unit  "Var(name='var[i]')" (App unit  (Var unit  "func[mul$R$VecR]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[r]")) (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[i]")) (Var unit  "var[a]")))))))))) (App unit  (Var unit  "func[build]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[size]") (Var unit  "var[a]"))) (Lam unit  "Var(name='var[i]')" (App unit  (Var unit  "func[mul]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[r]")) (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[i]")) (Var unit  "var[a]")))))))))) (App unit  (Var unit  "func[build]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[size]") (Var unit  "var[v]"))) (Lam unit  "Var(name='var[i]')" (App unit  (Var unit  "func[exp]") (App unit  (Var unit  "func[index]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[i]")) (Var unit  "var[v]"))))))))) (App unit  (Var unit  "func[div]") (App unit  (App unit  (Var unit  "makeTuple") (App unit  (Var unit  "func[mul]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[n]")) (App unit  (Var unit  "func[sub]") (App unit  (App unit  (Var unit  "makeTuple") (Var unit  "var[n]")) (Var unit  "const[1]")))))) (Var unit  "const[2]")))